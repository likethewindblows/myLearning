面向对象：3大特性 6大原则  SOLID

封装 继承 多态

1.开闭原则
对扩展开放，对修改关闭。

2.里氏替换原则(所有引用基类的地方必须能够透明的使用其子类对象。)
使用接口的时候，我们必须确保子类能够替换父类所出现的任何地方。

a、子类必须完全实现父类的方法
b、子类可以有自己的特性
c、覆盖或者实现父类的方法时输入参数可以被放大
d、覆写或者实现父类的方法时输出结果可以被缩小



3.依赖倒转原则  (多去抽象)
让高层模块不要依赖低层模块。


高层模块不应该依赖低层模块，二者都应该依赖其抽象
抽象不应该依赖细节，细节应该依赖抽象
依赖倒置的中心思想是面向接口编程
依赖倒置原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础的架构要稳定的多。在 java 中，抽象指的是接口或抽象类，细节就是具体的实现类
使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成


4.单一职责原则    （4,5,6强调解耦  123也是）
一个类应只实现单一或独立的职责即业务功能。

5.接口隔离原则
一个类应该依赖尽量少的接口或实现类，

6.迪米特法则
尽可能少的了解或依赖其它对象